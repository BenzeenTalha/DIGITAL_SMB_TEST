//Generated by wsdl2apex

public class SOAViewFixedLineAvailabilityService { 
    public class ViewFixedLineAvailabilityPort {
        //public String endpoint_x = 'https://sdpapi.ref.o2.co.uk/services/ViewFixedLineAvailability_1_0';
        public String endpoint_x = SOA_Integration_Settings__c.getValues('Line_Availability_Settings').Endpoint__c; 
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
        public String email;
        // -------------------
        public SOASecurityElement.Security_element Security;
        private String Security_hns = 'Security=http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
        
        public SOASecurityElement.SOAConsumerTransactionID_element SOAConsumerTransactionID;
        private String SOAConsumerTransactionID_hns = 'SOAConsumerTransactionID=http://soa.o2.co.uk/coredata_1';
        // -------------------
        private String[] ns_map_type_info = new String[]{'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1', 'SOAViewFixedLineAvailabilityData', 'http://soa.o2.co.uk/coredata_1', 'SOACoreData2', 'http://soa.o2.co.uk/openreach/pscommonopenreachdata_1', 'SOAOpenreachPSCommonOpenreach', 'http://soa.o2.co.uk/viewfixedlineavailabilityservice_1', 'SOAViewFixedLineAvailabilityService'};
        
        public SOAViewFixedLineAvailabilityData.getBTAddressMatch_1Response getBTAddressMatch_1(SOAViewFixedLineAvailabilityData.britishAddressType address) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------            
            SOAViewFixedLineAvailabilityData.getBTAddressMatch_1 request_x = new SOAViewFixedLineAvailabilityData.getBTAddressMatch_1();
            SOAViewFixedLineAvailabilityData.getBTAddressMatch_1Response response_x;
            request_x.address = address;
            Map<String, SOAViewFixedLineAvailabilityData.getBTAddressMatch_1Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getBTAddressMatch_1Response>();
            response_map_x.put('response_x', response_x);
            if(!Test.isRunningTest()) {
                WebServiceCallout.invoke(
                  this,
                  request_x,
                  response_map_x,
                  new String[]{endpoint_x,
                  '',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getBTAddressMatch_1',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getBTAddressMatch_1Response',
                  'SOAViewFixedLineAvailabilityData.getBTAddressMatch_1Response'}
                );
            } else {
                response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.getBTAddressMatch_1Response());
            }
            response_x = response_map_x.get('response_x');
            return response_x;
        }        
         
        public SOAViewFixedLineAvailabilityData.respondedInstallationDetailsType[] getInstallationDetails(SOAViewFixedLineAvailabilityData.lineParametersType[] lineParameters) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------
            SOAViewFixedLineAvailabilityData.getInstallationDetails request_x = new SOAViewFixedLineAvailabilityData.getInstallationDetails();
            System.debug('request_x: ' + request_x);
            SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse response_x;
            request_x.lineParameters = lineParameters;
            Map<String, SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse>();
            response_map_x.put('response_x', response_x);
             
            //if(!Test.isRunningTest()) {
                WebServiceCallout.invoke(
                  this,
                  request_x,
                  response_map_x,
                  new String[]{endpoint_x,
                  '',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getInstallationDetails',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getInstallationDetailsResponse',
                  'SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse'}
                );
            //} else {
            //     response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse());
            //}
            
            response_x = response_map_x.get('response_x');
            //System.debug('>>>>>>>> request_x:'+ request_x);
            system.debug('response_map_x: '+response_map_x);
            system.debug('response: '+response_x);
            system.debug('response_x.respondedInstallationDetails: '+response_x.respondedInstallationDetails);
            return response_x.respondedInstallationDetails;
            //return null;
        }
     
        public SOAViewFixedLineAvailabilityData.getInstallationDetails_2Response getInstallationDetails_2(SOAViewFixedLineAvailabilityData.addressType address,SOAViewFixedLineAvailabilityData.serviceIdType serviceId,String accessLineId,String postcode,String workingLineTakeover,String endUserConsent) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------
            SOAViewFixedLineAvailabilityData.getInstallationDetails_2 request_x = new SOAViewFixedLineAvailabilityData.getInstallationDetails_2();
            SOAViewFixedLineAvailabilityData.getInstallationDetails_2Response response_x;
            //request_x.address = address;
            request_x.serviceId = serviceId;
            //request_x.accessLineId = '';
            request_x.postcode = postcode;
            request_x.workingLineTakeover = workingLineTakeover;
            request_x.endUserConsent = endUserConsent;
            Map<String, SOAViewFixedLineAvailabilityData.getInstallationDetails_2Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getInstallationDetails_2Response>();
            response_map_x.put('response_x', response_x);
            WebServiceCallout.invoke(
              this,
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              '',
              'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
              'getInstallationDetails_2',
              'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
              'getInstallationDetails_2Response',
              'SOAViewFixedLineAvailabilityData.getInstallationDetails_2Response'}
            );
            response_x = response_map_x.get('response_x');
            return response_x;
        }

        public SOAViewFixedLineAvailabilityData.addressRecordType[] searchBTAddress_1(SOAViewFixedLineAvailabilityData.britishAddressType address) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------   
            SOAViewFixedLineAvailabilityData.searchBTAddress_1 request_x = new SOAViewFixedLineAvailabilityData.searchBTAddress_1();
            SOAViewFixedLineAvailabilityData.searchBTAddress_1Response response_x;
            request_x.address = address;
            Map<String, SOAViewFixedLineAvailabilityData.searchBTAddress_1Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.searchBTAddress_1Response>();
            response_map_x.put('response_x', response_x);
            if(!Test.isRunningTest()) {
                WebServiceCallout.invoke(
                  this,
                  request_x,
                  response_map_x,
                  new String[]{endpoint_x,
                  '',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'searchBTAddress_1',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'searchBTAddress_1Response',
                  'SOAViewFixedLineAvailabilityData.searchBTAddress_1Response'}
                );
            } else {
                response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.searchBTAddress_1Response());
            }            
            response_x = response_map_x.get('response_x');
            return response_x.addressRecord;
        }
        
        public SOAViewFixedLineAvailabilityData.getLineCharacteristics_1Response getLineCharacteristics_1(String serviceType,String postCode) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------              
            SOAViewFixedLineAvailabilityData.getLineCharacteristics_1 request_x = new SOAViewFixedLineAvailabilityData.getLineCharacteristics_1();
            SOAViewFixedLineAvailabilityData.getLineCharacteristics_1Response response_x;
            //request_x.directoryNumber = directoryNumber;
            request_x.serviceType = serviceType;
            request_x.postcode = postCode;
            Map<String, SOAViewFixedLineAvailabilityData.getLineCharacteristics_1Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getLineCharacteristics_1Response>();
            response_map_x.put('response_x', response_x);
			system.debug(request_x);
            system.debug(response_map_x);
            //endpoint_x = 'https://www.qaresponder.info/WebServices/OutboundMessagingHandler_AckAll/om.ashx';
            //endpoint_x = 'https://sdpapi.ref.o2.co.uk/services/ViewFixedLineAvailability_1_0';
            /*
            if(!Test.isRunningTest()) {
                system.debug('about to call ws');
                try {
	                WebServiceCallout.invoke(
	                  this,
	                  request_x,
	                  response_map_x,
	                  new String[]{endpoint_x,
	                  '',
	                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
	                  'getLineCharacteristics_1',
	                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
	                  'getLineCharacteristics_1Response',
	                  'SOAViewFixedLineAvailabilityData.getLineCharacteristics_1Response'}
	                );
	                system.debug('end of call ws');                	
                } catch( Exception e) {
                	system.debug('exception: '+e);
                }

            } else {*/
                response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.getLineCharacteristics_1Response());
            //}               
            response_x = response_map_x.get('response_x');
            return response_x;
        }
        
        public SOAViewFixedLineAvailabilityData.getLineCharacteristics_2Response getLineCharacteristics_2(String dpNumber,String mdfSiteId) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------      
            SOAViewFixedLineAvailabilityData.getLineCharacteristics_2 request_x = new SOAViewFixedLineAvailabilityData.getLineCharacteristics_2();
            SOAViewFixedLineAvailabilityData.getLineCharacteristics_2Response response_x;
            request_x.dpNumber = dpNumber;
            request_x.mdfSiteId = mdfSiteId;
            // TODO: add the other attributes that didn't come in the WSDL2Apex conversion
            Map<String, SOAViewFixedLineAvailabilityData.getLineCharacteristics_2Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getLineCharacteristics_2Response>();
            response_map_x.put('response_x', response_x);
            // DISABLE this service call but allow the testing to succeed
            /*
            if(!Test.isRunningTest()) {
	            WebServiceCallout.invoke(
	              this,
	              request_x,
	              response_map_x,
	              new String[]{endpoint_x,
	              '',
	              'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
	              'getLineCharacteristics_2',
	              'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
	              'getLineCharacteristics_2Response',
	              'SOAViewFixedLineAvailabilityData07.getLineCharacteristics_2Response'}
	            );            	
            } else {*/
                response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.getLineCharacteristics_2Response());            	
            //}

            response_x = response_map_x.get('response_x');
            return response_x;
        }        
        
        public SOAViewFixedLineAvailabilityData.getBTAddressDetails_1Response getBTAddressDetails_1(String addressKey) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------               
            SOAViewFixedLineAvailabilityData.getBTAddressDetails_1 request_x = new SOAViewFixedLineAvailabilityData.getBTAddressDetails_1();
            SOAViewFixedLineAvailabilityData.getBTAddressDetails_1Response response_x;
            request_x.addressKey = addressKey;
            Map<String, SOAViewFixedLineAvailabilityData.getBTAddressDetails_1Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getBTAddressDetails_1Response>();
            response_map_x.put('response_x', response_x);
            if(!Test.isRunningTest()) {
                WebServiceCallout.invoke(
                  this,
                  request_x,
                  response_map_x,
                  new String[]{endpoint_x,
                  '',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getBTAddressDetails_1',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getBTAddressDetails_1Response',
                  'SOAViewFixedLineAvailabilityData.getBTAddressDetails_1Response'}
                );
            } else {
                response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.getBTAddressDetails_1Response());
            }               
            response_x = response_map_x.get('response_x');
            return response_x;
        }
        
        public SOAViewFixedLineAvailabilityData.getMACStatus_1Response getMACStatus_1(String mac,String serviceId,String directoryNumber) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------               
            SOAViewFixedLineAvailabilityData.getMACStatus_1 request_x = new SOAViewFixedLineAvailabilityData.getMACStatus_1();
            SOAViewFixedLineAvailabilityData.getMACStatus_1Response response_x;
            request_x.mac = mac;
            request_x.serviceId = serviceId;
            request_x.directoryNumber = directoryNumber;
            Map<String, SOAViewFixedLineAvailabilityData.getMACStatus_1Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getMACStatus_1Response>();
            response_map_x.put('response_x', response_x);
            if(!Test.isRunningTest()) {
                WebServiceCallout.invoke(
                  this,
                  request_x,
                  response_map_x,
                  new String[]{endpoint_x,
                  '',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getMACStatus_1',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getMACStatus_1Response',
                  'SOAViewFixedLineAvailabilityData.getMACStatus_1Response'}
                );
            } else {
                response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.getMACStatus_1Response());
            }               
            response_x = response_map_x.get('response_x');
            return response_x;
        }
        
        public SOAViewFixedLineAvailabilityData.getNetworkAvailability_1Response getNetworkAvailability_1(String addressKey,String districtCode) {
            // -------------------
            Security = new SOASecurityElement.Security_element();
            SOAConsumerTransactionID = new SOASecurityElement.SOAConsumerTransactionID_element(email);
            // -------------------               
            SOAViewFixedLineAvailabilityData.getNetworkAvailability_1 request_x = new SOAViewFixedLineAvailabilityData.getNetworkAvailability_1();
            SOAViewFixedLineAvailabilityData.getNetworkAvailability_1Response response_x;
            request_x.addressKey = addressKey;
            request_x.districtCode = districtCode;
            Map<String, SOAViewFixedLineAvailabilityData.getNetworkAvailability_1Response> response_map_x = new Map<String, SOAViewFixedLineAvailabilityData.getNetworkAvailability_1Response>();
            response_map_x.put('response_x', response_x);
            if(!Test.isRunningTest()) {
                WebServiceCallout.invoke(
                  this,
                  request_x,
                  response_map_x,
                  new String[]{endpoint_x,
                  '',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getNetworkAvailability_1',
                  'http://soa.o2.co.uk/viewfixedlineavailabilitydata_1',
                  'getNetworkAvailability_1Response',
                  'SOAViewFixedLineAvailabilityData.getNetworkAvailability_1Response'}
                );
            } else {
                response_map_x.put('response_x',new SOAViewFixedLineAvailabilityData.getNetworkAvailability_1Response());
            }               
            response_x = response_map_x.get('response_x');
            return response_x;
        }

        
    }
            
    // Manually construct a response message used in test methods
    /*
    public static SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse getResponseForTestMethods() {
        
        boolean unsupportedAttributes = true;
        //if(lineAvailabilityRequest.Directory_Number__c=='1111111111') 
        unsupportedAttributes = false;
        
        SOAViewFixedLineAvailabilityData.respondedInstallationDetailsType response;
        
        response = new SOAViewFixedLineAvailabilityData.respondedInstallationDetailsType();
        SOACoreData2.ServiceResultType retrievalStatus = new SOACoreData2.ServiceResultType();
        retrievalStatus.StatusCode = '2000';
        retrievalStatus.ExternalDescription = 'External Description';
        retrievalStatus.InternalDescription = 'Internal Description';
        response.retrievalStatus = new List<SOACoreData2.ServiceResultType>();
        response.retrievalStatus.add(retrievalStatus);
                
        SOAViewFixedLineAvailabilityData.installationDetailsType installationDetails = new SOAViewFixedLineAvailabilityData.installationDetailsType();
        installationDetails.lineType = 'Test';
        installationDetails.serviceType = 'PSTN';
        installationDetails.auxilaryLineQuantity = 1;
        installationDetails.carrierPreSelectPresent = '';
        installationDetails.accessTypeConfiguration = '';
        
        // Service
        //SOAViewFixedLineAvailabilityData.serviceIdType service = new SOAViewFixedLineAvailabilityData.serviceIdType();
        //service.directoryNumber = '1222321321';
        //installationDetails.serviceType = service;
        
        // Address container
        SOAViewFixedLineAvailabilityData.addressReferenceType addressRef = new SOAViewFixedLineAvailabilityData.addressReferenceType();
        addressRef.addressKey='1';
        addressRef.districtCode='1';
        SOAViewFixedLineAvailabilityData.britishAddressType addressBR = new SOAViewFixedLineAvailabilityData.britishAddressType();
        addressBR.organisationName = 'TestCompany';
        
        SOAViewFixedLineAvailabilityData.addressType address = new SOAViewFixedLineAvailabilityData.addressType();
        address.addressReference = addressRef;
        address.britishAddress = addressBR;
        
        installationDetails.address = address;
        
        // Site
        SOAViewFixedLineAvailabilityData.siteType site = new SOAViewFixedLineAvailabilityData.siteType();
        SOAViewFixedLineAvailabilityData.locationType location = new SOAViewFixedLineAvailabilityData.locationType();
        location.floor = '1';
        location.room = '2';
        location.position = '1';
        site.location = location;
        installationDetails.site = site;
        

        // CNFs
        SOAViewFixedLineAvailabilityData.listOfCNFType listOfCallingAndNetworkFeature = new SOAViewFixedLineAvailabilityData.listOfCNFType();
        List<SOAViewFixedLineAvailabilityData.cnfType> callingAndNetworkFeatureList = new List<SOAViewFixedLineAvailabilityData.cnfType>();
        //feature.
        SOAViewFixedLineAvailabilityData.cnfType feature = new SOAViewFixedLineAvailabilityData.cnfType();        
        feature.callingNetworkFeatureName = 'Test Feature';
        SOAViewFixedLineAvailabilityData.cnfType feature2 = new SOAViewFixedLineAvailabilityData.cnfType();        
        feature2.callingNetworkFeatureName = 'Anonymous Call Reject';        
        // service
        SOAViewFixedLineAvailabilityData.serviceType service = null;
        if(unsupportedAttributes) {
            service = new SOAViewFixedLineAvailabilityData.serviceType();
            service.serviceName = 'x';
        } 
        
        listOfCallingAndNetworkFeature.callingAndNetworkFeature = new List<SOAViewFixedLineAvailabilityData.cnfType>();
        //listOfCallingAndNetworkFeature.callingAndNetworkFeature.add(feature);
        
        if(unsupportedAttributes) {
            listOfCallingAndNetworkFeature.listOfUnsupportedService = new SOAViewFixedLineAvailabilityData.listOfUnsupportedServiceType();
            listOfCallingAndNetworkFeature.listOfUnsupportedService.service = new List<SOAViewFixedLineAvailabilityData.serviceType>();
            listOfCallingAndNetworkFeature.listOfUnsupportedService.service.add(service);
            listOfCallingAndNetworkFeature.listOfIncompatibleService = new SOAViewFixedLineAvailabilityData.listOfIncompatibleServiceType();
            listOfCallingAndNetworkFeature.listOfIncompatibleService.service = new List<SOAViewFixedLineAvailabilityData.serviceType>();    
            listOfCallingAndNetworkFeature.listOfIncompatibleService.service.add(service);
        }
        
        listOfCallingAndNetworkFeature.callingAndNetworkFeature.add(feature);
        listOfCallingAndNetworkFeature.callingAndNetworkFeature.add(feature2);
        installationDetails.listOfCallingAndNetworkFeature = listOfCallingAndNetworkFeature;

        // DDI range
        SOAViewFixedLineAvailabilityData.ddiRangeType ddiRange = new SOAViewFixedLineAvailabilityData.ddiRangeType();
        ddiRange.rangeFrom = '11111111';
        ddiRange.rangeTo = '22222222';
        ddiRange.rangeSequenceNumber = '1';
        ddiRange.numberOfDirectDialIns = '1';

        // Channel
        SOAViewFixedLineAvailabilityData.channelType channel = new SOAViewFixedLineAvailabilityData.channelType();
        channel.channelNumber = '1';
        channel.direction = 'x';
        channel.bearerSequenceNumber = '1';
        channel.strokeNumber = '1';
        channel.listOfDirectDialInRange = new SOAViewFixedLineAvailabilityData.listOfDDIRangeType();
        channel.listOfDirectDialInRange.numberOfDirectDialInRanges='1';
        channel.listOfDirectDialInRange.numberRetentionAllowed='Y';
        channel.listOfDirectDialInRange.directDialInRange = new List<SOAViewFixedLineAvailabilityData.ddiRangeType>();
        channel.listOfDirectDialInRange.directDialInRange.add(ddiRange);
     
        // SNDDI
        SOAViewFixedLineAvailabilityData.snddiType snddi = new SOAViewFixedLineAvailabilityData.snddiType();
        snddi.snddiCLI='1';
        snddi.snddiCLISequenceNumber='1';
        
        // MSN
        SOAViewFixedLineAvailabilityData.msnType msn = new SOAViewFixedLineAvailabilityData.msnType();
        msn.msnNumber='1';
        msn.msnNumberSequenceNumber='1';
        
        // Directory
        SOAViewFixedLineAvailabilityData.directoryType directory = new SOAViewFixedLineAvailabilityData.directoryType();
        directory.businessDescription='1';
        directory.businessName='1';
        directory.directoryEntryLine='1';
        directory.directoryEntryListing='1';
        directory.directoryEntryType='1';
        installationDetails.listOfDirectoryInfo = new SOAViewFixedLineAvailabilityData.listOfDirectoryInfoType();
        installationDetails.listOfDirectoryInfo.directory = new List<SOAViewFixedLineAvailabilityData.directoryType>();
        installationDetails.listOfDirectoryInfo.directory.add(directory);
                
        // Bearer
        SOAViewFixedLineAvailabilityData.bearerType bearer = new SOAViewFixedLineAvailabilityData.bearerType();
        bearer.bearerSequenceNumber = '1';
        bearer.bearerId = '1';
        bearer.listOfChannel = new SOAViewFixedLineAvailabilityData.listOfChannelType();
        bearer.listOfChannel.numberOfChannels='1';
        bearer.listOfChannel.channel = new List<SOAViewFixedLineAvailabilityData.channelType>();
        bearer.listOfChannel.channel.add(channel);
        installationDetails.listOfBearer = new SOAViewFixedLineAvailabilityData.listOfBearerType();
        installationDetails.listOfBearer.bearer = new List<SOAViewFixedLineAvailabilityData.bearerType>();
        installationDetails.listOfBearer.bearer.add(bearer);
                
        // Main Billing Address
        SOAViewFixedLineAvailabilityData.mainBillingNumberType mbn = new SOAViewFixedLineAvailabilityData.mainBillingNumberType();
        mbn.mainBillingNumberCLI='11111111';
        mbn.numberRetentionAllowed='Y';
        mbn.mainBillingNumberReference='1111';
        mbn.mainBillingNumberSequenceNumber='11111';
        mbn.mainBillingNumberDetails = new SOAViewFixedLineAvailabilityData.mainBillingNumberDetailsType();
        mbn.mainBillingNumberDetails.carrierPreSelectPresent='Y';
        mbn.mainBillingNumberDetails.debtManagementIndicator='Y';
        mbn.mainBillingNumberDetails.listOfChannel = new SOAViewFixedLineAvailabilityData.listOfChannelType();
        mbn.mainBillingNumberDetails.listOfChannel.numberOfChannels='1';
        mbn.mainBillingNumberDetails.listOfChannel.channel = new List<SOAViewFixedLineAvailabilityData.channelType>();
        mbn.mainBillingNumberDetails.listOfChannel.channel.add(channel);
        
        mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature = new SOAViewFixedLineAvailabilityData.listOfCNFType();
        mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.callingAndNetworkFeature = new List<SOAViewFixedLineAvailabilityData.cnfType>();
        mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.callingAndNetworkFeature.add(feature);
            
        if(unsupportedAttributes) {
            mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.listOfUnsupportedService = new SOAViewFixedLineAvailabilityData.listOfUnsupportedServiceType();
            mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.listOfUnsupportedService.service = new List<SOAViewFixedLineAvailabilityData.serviceType>();
            mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.listOfIncompatibleService = new SOAViewFixedLineAvailabilityData.listOfIncompatibleServiceType();
            mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.listOfIncompatibleService.service = new List<SOAViewFixedLineAvailabilityData.serviceType>();
            mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.listOfUnsupportedService.service.add(service);
            mbn.mainBillingNumberDetails.listOfCallingAndNetworkFeature.listOfIncompatibleService.service.add(service);        
        }
               
        mbn.mainBillingNumberDetails.listOfDirectDialInRange = new SOAViewFixedLineAvailabilityData.listOfDDIRangeType();
        mbn.mainBillingNumberDetails.listOfDirectDialInRange.numberOfDirectDialInRanges='1';
        mbn.mainBillingNumberDetails.listOfDirectDialInRange.numberRetentionAllowed='Y';
        mbn.mainBillingNumberDetails.listOfDirectDialInRange.directDialInRange = new List<SOAViewFixedLineAvailabilityData.ddiRangeType>();
        mbn.mainBillingNumberDetails.listOfDirectDialInRange.directDialInRange.add(ddiRange);
        mbn.mainBillingNumberDetails.listOfDirectoryInfo = new SOAViewFixedLineAvailabilityData.listOfDirectoryInfoType();
        mbn.mainBillingNumberDetails.listOfDirectoryInfo.directory = new List<SOAViewFixedLineAvailabilityData.directoryType>();
        mbn.mainBillingNumberDetails.listOfDirectoryInfo.directory.add(directory);
        
        mbn.mainBillingNumberDetails.listOfMultiSubscriberNumber = new SOAViewFixedLineAvailabilityData.listOfMSNType();
        mbn.mainBillingNumberDetails.listOfMultiSubscriberNumber.numberOfMultiSubscriberNumbers='1';
        mbn.mainBillingNumberDetails.listOfMultiSubscriberNumber.numberRetentionAllowed='Y';
        mbn.mainBillingNumberDetails.listOfMultiSubscriberNumber.multiSubscriberNumber = new List<SOAViewFixedLineAvailabilityData.msnType>();
        mbn.mainBillingNumberDetails.listOfMultiSubscriberNumber.multiSubscriberNumber.add(msn);
        
        mbn.mainBillingNumberDetails.listOfSingleNumberDirectDialIn = new SOAViewFixedLineAvailabilityData.listOfSNDDIType();
        mbn.mainBillingNumberDetails.listOfSingleNumberDirectDialIn.numberOfSNDDIs='1';
        mbn.mainBillingNumberDetails.listOfSingleNumberDirectDialIn.numberRetentionAllowed='Y';
        mbn.mainBillingNumberDetails.listOfSingleNumberDirectDialIn.singleNumberDirectDialIn = new List<SOAViewFixedLineAvailabilityData.snddiType>();
        mbn.mainBillingNumberDetails.listOfSingleNumberDirectDialIn.singleNumberDirectDialIn.add(snddi);
        mbn.mainBillingNumberDetails.listOfSingleNumberDirectDialIn.singleNumberDirectDialIn.add(snddi);
        
        installationDetails.listOfMainBillingNumber = new SOAViewFixedLineAvailabilityData.listOfMainBillingNumberType();
        installationDetails.listOfMainBillingNumber.mainBillingNumber = new List<SOAViewFixedLineAvailabilityData.mainBillingNumberType>();
        installationDetails.listOfMainBillingNumber.mainBillingNumber.add(mbn);   
        installationDetails.listOfMainBillingNumber.mainBillingNumber.add(mbn); 
        
        // Orders
        SOAViewFixedLineAvailabilityData.pendingOrderType pendingOrder = new SOAViewFixedLineAvailabilityData.pendingOrderType();
        pendingOrder.pendingOrderType='X';
        pendingOrder.isThirdParty='N';
        installationDetails.listOfPendingOrder = new SOAViewFixedLineAvailabilityData.listOfPendingOrderType();
        installationDetails.listOfPendingOrder.pendingOrder = new List<SOAViewFixedLineAvailabilityData.pendingOrderType> ();
        installationDetails.listOfPendingOrder.pendingOrder.add(pendingOrder);
        installationDetails.listOfPendingOrder.pendingOrder.add(pendingOrder);
        installationDetails.listOfPendingOrder.pendingOrder.add(pendingOrder);
        installationDetails.listOfPendingOrder.pendingOrder.add(pendingOrder);
        installationDetails.listOfPendingOrder.pendingOrder.add(pendingOrder);    
        response.installationDetails = installationDetails;
        SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse gidr = new SOAViewFixedLineAvailabilityData.getInstallationDetailsResponse();
        gidr.respondedInstallationDetails = new List<SOAViewFixedLineAvailabilityData.respondedInstallationDetailsType>();
        gidr.respondedInstallationDetails.add(response);     
        return gidr;
        
    }    */
    
    // This is wsdl2apex generated class - asserts not required
    static testMethod void testSOAViewFixedLineAvailabilityService() {
        SOAViewFixedLineAvailabilityService.ViewFixedLineAvailabilityPort port = new SOAViewFixedLineAvailabilityService.ViewFixedLineAvailabilityPort();
        port.getBTAddressMatch_1(new SOAViewFixedLineAvailabilityData.britishAddressType());
        port.searchBTAddress_1(new SOAViewFixedLineAvailabilityData.britishAddressType());
        port.getLineCharacteristics_1('All', 'L42QH');
        port.getLineCharacteristics_2('dpNumber', 'mdfSiteId');
        port.getBTAddressDetails_1('addressKey');
        port.getMACStatus_1('mac', 'serviceId', '441512634281');
        port.getNetworkAvailability_1('addressKey', '1512');
        
        // this one is supposed to throw an exception when running in test mode. 	
        try {
        	port.getInstallationDetails(new List<SOAViewFixedLineAvailabilityData.lineParametersType>());
        } catch (Exception e) {
        	
        }
    }    
    
}