public without sharing class Utility {
	
    public static Date stringToDate(String s){
        if (s != null) {
          //Date String is in the format mm/dd/yyyy
          String[] stringDate = s.split('/');
          if (stringDate.size() == 3) {
  		  	Integer d =  Integer.valueOf(stringDate[1]);
  			Integer m = Integer.valueOf(stringDate[0]);
  			Integer y = Integer.valueOf(stringDate[2]);
  			// Correct a problem introduced by webcom sending back 2 digit years
  			if (y < 2000) y += 2000;
  			return date.newInstance(y,m,d);
          } else {
          	return null;
          }
        } else {
            return null;
        }
    }
    
    public static void ShareCaseManually(List<Id> lstCaseId, List<Id> lstuserOrGroupId)
    {
      
      List<CaseShare> lstCaseShare = new List<CaseShare>();
      
      for (integer i=0;i<lstCaseId.size();++i)
      {
      CaseShare cs = new CaseShare();
        cs.Caseid=lstCaseId[i];
        cs.UserOrGroupId = lstuserOrGroupId[i];
        cs.CaseAccessLevel='Read';
        //cs.RowCause='Manual';
        lstCaseShare.add(cs);
      }
      
      
      insert lstCaseShare;
    }
    
    // Get a comma separated SObject Field list 
    public static String getSobjectFields(String so) {
        String fieldString;
   
        SObjectType sot = Schema.getGlobalDescribe().get(so);
        if (sot == null) return null;
   
        List<Schema.SObjectField> fields = sot.getDescribe().fields.getMap().values();
       
        fieldString = fields[0].getDescribe().LocalName;
        for (Integer i = 1; i < fields.size(); i++) {
            fieldString += ',' + fields[i].getDescribe().LocalName;
        }
        return fieldString;
    }
    // convert a List to a Quoted comma separated list in Parentheses 
    // for use with the in clause in dynamic SOQL
    public static String convertListToString(List<SObject> vList) {
        String listString = '(\'\')';
        if (vList.size() > 0) {
            listString = '(\''+vList[0].Id+'\'';
            for (Integer i = 1; i < vList.size(); i++) {
                listString += ',\'' + vList[i].Id+'\'';
            }
            listString += ')';
        }
        return listString ;
    }   
                 
    // convert a List to a Quoted comma separated list in Parentheses 
    // for use with the in clause in dynamic SOQL
    public static String convertListToString(List<String> vList) {
        String listString = '(\'\')';
        if (vList.size() > 0) {
            listString = '(\''+vList[0]+'\'';
            for (Integer i = 1; i < vList.size(); i++) {
                listString += ',\'' + vList[i]+'\'';
            }
            listString += ')';
        }
        return listString ;
    }   
         
    // convert a List to a Quoted comma separated list in Parentheses 
    // for use with the in clause in dynamic SOQL
    public static String convertSetToString(Set<String> vSet) {
        String listString = '(\'\')';
        Integer i = 0;
        if (vSet.size() > 0) {
            for (String lSet : vSet) {
            	if (i == 0) {
            		listString = '(\''+lSet+'\'';
            	}
                listString += ',\'' + lSet+'\'';
                i++;
            }
            listString += ')';
        }
        return listString ;
    }
    // convert a List to a Quoted comma separated list in Parentheses 
    // for use with the in clause in dynamic SOQL
    public static String convertSetToString(Set<Id> vSet) {
        String listString = '(\'\')';
        Integer i = 0;
        if (vSet.size() > 0) {
            for (Id lSet : vSet) {
            	if (i == 0) {
            		listString = '(\''+lSet+'\'';
            	}else{
                	listString += ',\'' + lSet+'\'';
            	}
                i++;
            }
            listString += ')';
        }
        return listString ;
    }    
    
    // Get a substring based on two other strings surrounding it.
    public static String getSubString(String origString, String leftDelimeter, String rightDelimeter) {
    	Integer leftIndex  = origString.lastIndexOf(leftDelimeter) + leftDelimeter.length();
    	Integer rightIndex = origString.lastIndexOf(rightDelimeter);
    	String subString = origString;
    	if (leftIndex != -1 && rightIndex != -1) {
    		subString = origString.substring(leftIndex, rightIndex);
    	} else if (leftIndex != -1 && rightIndex == -1) {
    		subString = origString.substring(leftIndex);
    	}
    	return subString;
    }
    
    public static void doExercise() {
    	Integer i = 0;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    	i = 1;
    }
    
    /******************** No longer required 
	//
    public static void processMonitorField(List<String> instructionStepIdList) {
    	// Split the incoming list
    	List<String> stepIdList = new List<String>();
    	List<String> instructionIdList = new List<String>();
    	Map<String,String> stepInstructionIdMap = new Map<String,String>();
    	for (String rec : instructionStepIdList) {
    		List<String> recSplitList = rec.split(':');
    		if (recSplitList.size() == 2) {
	    		instructionIdList.add(recSplitList[0]);
	    		stepIdList.add(recSplitList[1]);
	    		stepInstructionIdMap.put(recSplitList[1],recSplitList[0]);
    		}
    	} 
    	//
    	List<CSPOFA__Orchestration_Step__c> stepDetailsList = [select id, CSPOFA__message__c, CSPOFA__Status__c, CSPOFA__Progress__c, CSPOFA__Field_Name__c, 
    														  CSPOFA__Field_Value__c, CSPOFA__Field_Type__c, CSPOFA__Field_Monitor_Operator__c 
    													 from CSPOFA__Orchestration_Step__c where id = :stepIdList];
    	//
    	String queryString = null;
        queryString = 'select id, CSPOFA__message__c, CSPOFA__Status__c, CSPOFA__Progress__c, CSPOFA__Field_Name__c, CSPOFA__Field_Value__c, CSPOFA__Field_Type__c, CSPOFA__Field_Monitor_Operator__c';
        //
  		for (CSPOFA__Orchestration_Step__c step : stepDetailsList) {
  			if (!queryString.contains('CSPOFA__Orchestration_Process__r.'+step.CSPOFA__Field_Name__c))
    			queryString += ', CSPOFA__Orchestration_Process__r.'+step.CSPOFA__Field_Name__c;
    	}
        queryString += ' from CSPOFA__Orchestration_Step__c where id in'+Utility.convertListToString(stepIdList);
        //
        List<sObject> stepDetailObjectList = Database.query(queryString);
        //
    	List<String> instructionsDoneIdList = new List<String>();
    	for (sObject step : stepDetailObjectList) {
    		sObject process = step.getSObject('CSPOFA__Orchestration_Process__r');
    		// Get the field to monitor:
    		String fieldToMonitor = (String)step.get('CSPOFA__Field_Name__c');
    		// Split it into its components
    		List<String> fieldToMonitorList = fieldToMonitor.split('\\.');
    		// Get the child object
    		sObject childObject;
    		Integer fieldindex = 1;
    		if (fieldToMonitorList.size() == 2) {
				childObject = process.getSObject(fieldToMonitorList[0]);
    			fieldIndex = 1;
    		} else if (fieldToMonitorList.size() == 3) {
    			system.debug('*****>>fieldToMonitorList[0]:'+fieldToMonitorList[0]);
    			system.debug('*****>>fieldToMonitorList[1]:'+fieldToMonitorList[1]);
    			childObject = process.getSObject(fieldToMonitorList[0]).getSObject(fieldToMonitorList[1]);
    			fieldIndex = 2;
    		} else if (fieldToMonitorList.size() == 4) {
    			childObject = process.getSObject(fieldToMonitorList[0]).getSObject(fieldToMonitorList[1]).getSObject(fieldToMonitorList[2]);
    			fieldIndex = 3;
    		}
			//
			Boolean fieldValueBoolean;
			Date fieldValueDate;
			Double fieldValueNumber;
			String fieldType = (String) step.get('CSPOFA__Field_Type__c');
			String FieldOperator = (String) step.get('CSPOFA__Field_Monitor_Operator__c');
			Boolean isCompleted = False;
			if (fieldType == 'Boolean') {
				fieldValueBoolean = step.get('CSPOFA__Field_Value__c') == 'True' ? True : False;
				//
	    		if ((FieldOperator == 'Equal To' && childObject.get(fieldToMonitorList[fieldindex]) == fieldValueBoolean) || 
	    			(FieldOperator == 'Not Equal To' && childObject.get(fieldToMonitorList[fieldindex]) != fieldValueBoolean)) {
	    			isCompleted = True;
	    		}
			} else if (fieldType == 'Date') {
				fieldValueDate = utility.stringToDate((String)step.get('CSPOFA__Field_Value__c'));
				//
	    		if ((FieldOperator == 'Equal To' && childObject.get(fieldToMonitorList[fieldindex]) == fieldValueDate) || 
	    			(FieldOperator == 'Not Equal To' && childObject.get(fieldToMonitorList[fieldindex]) != fieldValueDate)) {
	    			isCompleted = True;
	    		}
			} else if (fieldType == 'Number') {
				fieldValueNumber = Double.valueOf((String)step.get('CSPOFA__Field_Value__c'));
				//
	    		if ((FieldOperator == 'Equal To' && childObject.get(fieldToMonitorList[fieldindex]) == fieldValueNumber) || 
	    			(FieldOperator == 'Not Equal To' && childObject.get(fieldToMonitorList[fieldindex]) != fieldValueNumber)) {
	    			isCompleted = True;
	    		}
			} else {
				//
	    		if ((FieldOperator == 'Equal To' && childObject.get(fieldToMonitorList[fieldindex]) == step.get('CSPOFA__Field_Value__c')) || 
	    			(FieldOperator == 'Not Equal To' && childObject.get(fieldToMonitorList[fieldindex]) != step.get('CSPOFA__Field_Value__c'))) {
	    			isCompleted = True;
	    		}
			}
			if (isCompleted) {
    			step.put('CSPOFA__Status__c','Complete');
    			step.put('CSPOFA__Progress__c','Complete');
                step.put('CSPOFA__message__c','Completed waiting task on: '+date.today());
	            step.put('CSPOFA__Completed_Date__c',date.today());
                //
                instructionsDoneIdList.add(stepInstructionIdMap.get((String)step.get('Id')));
			}
    	}
    	update stepDetailObjectList;
    	//
    	List<CSPOFA__POF_Callout_Instruction__c> instructionDoneList = [select Id, CSPOFA__Status__c from CSPOFA__POF_Callout_Instruction__c where Id = :instructionsDoneIdList];
    	for (CSPOFA__POF_Callout_Instruction__c instruction : instructionDoneList) {
            instruction.CSPOFA__Status__c = 'Done';
    	}
        update instructionDoneList;
        
    }
    
    //
    public static void processUpdateField(List<String> instructionStepIdList) {
    	// Split the incoming list
    	List<String> stepIdList = new List<String>();
    	List<String> instructionIdList = new List<String>();
    	Map<String,String> stepInstructionIdMap = new Map<String,String>();
    	for (String rec : instructionStepIdList) {
    		List<String> recSplitList = rec.split(':');
    		if (recSplitList.size() == 2) {
	    		instructionIdList.add(recSplitList[0]);
	    		stepIdList.add(recSplitList[1]);
	    		stepInstructionIdMap.put(recSplitList[1],recSplitList[0]);
    		}
    	} 
    	//
    	List<CSPOFA__Orchestration_Step__c> stepDetailsList = [select id, CSPOFA__message__c, CSPOFA__Status__c, CSPOFA__Progress__c, CSPOFA__Field_Name__c,
    														  CSPOFA__Field_Value__c, CSPOFA__Field_Type__c, CSPOFA__Field_Monitor_Operator__c 
    													 from CSPOFA__Orchestration_Step__c where id = :stepIdList];
    	//
    	String queryString = null;
        queryString = 'select id, CSPOFA__message__c, CSPOFA__Status__c, CSPOFA__Progress__c, CSPOFA__Field_Name__c, CSPOFA__Field_Value__c, CSPOFA__Field_Type__c, CSPOFA__Field_Monitor_Operator__c';
        //
  		for (CSPOFA__Orchestration_Step__c step : stepDetailsList) {
  			if (!queryString.contains('CSPOFA__Orchestration_Process__r.'+step.CSPOFA__Field_Name__c))
    			queryString += ', CSPOFA__Orchestration_Process__r.'+step.CSPOFA__Field_Name__c;
    	}
        queryString += ' from CSPOFA__Orchestration_Step__c where id in'+Utility.convertListToString(stepIdList);
        //
        List<sObject> stepDetailObjectList = Database.query(queryString);
        //
    	List<String> instructionsDoneIdList = new List<String>();
    	List<sObject> childObjectList = new List<sObject>();
    	for (sObject step : stepDetailObjectList) {
    		if (Limits.getDmlStatements() < Limits.getLimitDmlStatements()) {
				Boolean fieldValueBoolean;
				Date fieldValueDate;
				Double fieldValueNumber;
				String fieldType = (String) step.get('CSPOFA__Field_Type__c');
				String FieldOperator = (String) step.get('CSPOFA__Field_Monitor_Operator__c');
				//
	    		sObject process = step.getSObject('CSPOFA__Orchestration_Process__r');
	    		// Get the field to update:
	    		String fieldToUpdate = (String)step.get('CSPOFA__Field_Name__c');
	    		// Split it into its components
	    		List<String> fieldToUpdateList = fieldToUpdate.split('\\.');
	    		// Get the child object
	    		sObject childObject;
	    		Integer fieldindex = 1;
	    		if (fieldToUpdateList.size() == 2) {
					childObject = process.getSObject(fieldToUpdateList[0]);
	    			fieldIndex = 1;
	    		} else if (fieldToUpdateList.size() == 3) {
	    			childObject = process.getSObject(fieldToUpdateList[0]).getSObject(fieldToUpdateList[1]);
	    			fieldIndex = 2;
	    		} else if (fieldToUpdateList.size() == 4) {
	    			childObject = process.getSObject(fieldToUpdateList[0]).getSObject(fieldToUpdateList[1]).getSObject(fieldToUpdateList[2]);
	    			fieldIndex = 3;
	    		}
				//
				if (fieldType == 'Boolean') {
					childObject.put(fieldToUpdateList[fieldIndex],step.get('CSPOFA__Field_Value__c') == 'True' ? True : False);
				} else if (fieldType == 'Date') {
					childObject.put(fieldToUpdateList[fieldIndex],Utility.stringToDate((String)step.get('CSPOFA__Field_Value__c')));
				} else if (fieldType == 'Number') {
					childObject.put(fieldToUpdateList[fieldIndex],Double.valueOf((String)step.get('CSPOFA__Field_Value__c')));
				} else {
					childObject.put(fieldToUpdateList[fieldIndex],step.get('CSPOFA__Field_Value__c'));
				}
				try {
					update childObject;
					//
					step.put('CSPOFA__Status__c','Complete');
					step.put('CSPOFA__Progress__c','Complete');
		            step.put('CSPOFA__message__c','Completed waiting task on: '+date.today());
		            step.put('CSPOFA__Completed_Date__c',date.today());
		            //
		            instructionsDoneIdList.add(stepInstructionIdMap.get((String)step.get('Id')));
				} catch(Exception ex) {
		            step.put('CSPOFA__message__c','Error occured while executing the step: '+ex);
		            //
		            instructionsDoneIdList.add(stepInstructionIdMap.get((String)step.get('Id')));
				}
    		}
    	}
    	update stepDetailObjectList;
    	//
    	List<CSPOFA__POF_Callout_Instruction__c> instructionDoneList = [select Id, CSPOFA__Status__c from CSPOFA__POF_Callout_Instruction__c where Id = :instructionsDoneIdList];
    	for (CSPOFA__POF_Callout_Instruction__c instruction : instructionDoneList) {
            instruction.CSPOFA__Status__c = 'Done';
    	}
        update instructionDoneList;
        
    }
    
    //
    public static void processWaitingInstruction(List<String> instructionStepIdList) {
    	// Split the incoming list
    	List<String> stepIdList = new List<String>();
    	List<String> instructionIdList = new List<String>();
    	Map<String,String> stepInstructionIdMap = new Map<String,String>();
    	for (String rec : instructionStepIdList) {
    		List<String> recSplitList = rec.split(':');
    		if (recSplitList.size() == 2) {
	    		instructionIdList.add(recSplitList[0]);
	    		stepIdList.add(recSplitList[1]);
	    		stepInstructionIdMap.put(recSplitList[1],recSplitList[0]);
    		}
    	} 
    	//
    	List<CSPOFA__Orchestration_Step__c> stepDetailsList = [select id, CSPOFA__message__c, CSPOFA__Status__c, CSPOFA__Progress__c, CSPOFA__Task_Due_Date__c 
    													 from CSPOFA__Orchestration_Step__c where id in :stepIdList];
    	List<String> instructionsDoneIdList = new List<String>();
    	for (CSPOFA__Orchestration_Step__c step : stepDetailsList) {
    		if (date.today() >= step.CSPOFA__Task_Due_Date__c) {
    			step.CSPOFA__Status__c = 'Complete';
    			step.CSPOFA__Progress__c = 'Complete';
                step.CSPOFA__message__c = 'Completed waiting task on: '+date.today();
		        step.put('CSPOFA__Completed_Date__c',date.today());
                //
                instructionsDoneIdList.add(stepInstructionIdMap.get(step.Id));
    		}
    	}
    	update stepDetailsList;
    	//
    	List<CSPOFA__POF_Callout_Instruction__c> instructionDoneList = [select Id, CSPOFA__Status__c from CSPOFA__POF_Callout_Instruction__c where Id = :instructionsDoneIdList];
    	for (CSPOFA__POF_Callout_Instruction__c instruction : instructionDoneList) {
            instruction.CSPOFA__Status__c = 'Done';
    	}
        update instructionDoneList;
        
    }
    
    public static void ProcessMonitorFieldsNow() 
    {
        List<CSPOFA__POF_Callout_Instruction__c> callInstructionList = [select Id, CSPOFA__Callout_Action__c, CSPOFA__Orchestration_Step__c, 
                                                                CSPOFA__Status__c from CSPOFA__POF_Callout_Instruction__c where CSPOFA__status__c = 'Not Started'];
        //
        // Get a list iof all the Step Ids involved in the outstanding callouts
        List<String> stepIdList = new List<String>();
        for (CSPOFA__POF_Callout_Instruction__c rec : callInstructionList) {
            stepIdList.add(rec.CSPOFA__Orchestration_Step__c);
        }
        // 
        // Loop through all the outstanding callout instructions and execute them
        List<String> updateFieldIdList = new List<String>();
        List<String> monitorFieldIdList = new List<String>();
        List<String> waitingNumberOfDaysIdList = new List<String>();
        for (CSPOFA__POF_Callout_Instruction__c rec : callInstructionList) {
            if (rec.CSPOFA__Callout_Action__c == 'Update Field') {
                updateFieldIdList.add(rec.Id+':'+rec.CSPOFA__Orchestration_Step__c);
            } else if (rec.CSPOFA__Callout_Action__c == 'Monitor Field') {
                monitorFieldIdList.add(rec.Id+':'+rec.CSPOFA__Orchestration_Step__c);
            } else if (rec.CSPOFA__Callout_Action__c == 'Wait Number Of Days') {
                waitingNumberOfDaysIdList.add(rec.Id+':'+rec.CSPOFA__Orchestration_Step__c);
            }
        }
        //
        if (!waitingNumberOfDaysIdList.isEmpty())
        	Utility.processWaitingInstruction(waitingNumberOfDaysIdList);
        //
        if (!monitorFieldIdList.isEmpty())
        	Utility.processMonitorField(monitorFieldIdList);
        //
        if (!updateFieldIdList.isEmpty())
        	Utility.processUpdateField(updateFieldIdList);
    }
    *********************/
    
    public static List<string[]> parseCSV(string contents, boolean skipHeaders) 
    {
        List<string[]> allFields = new List<string[]>();
     
        // Line delimiters
        string lineDelimiter;
        // if windows
        if (contents.contains('\r') && contents.contains('\n'))
        {
            contents = contents.replace('\r', '');
            lineDelimiter = '\n';
        }
        // Linux
        else if (contents.contains('\n'))
        {
            lineDelimiter = '\n';
        }
        // Mac OS
        else
        {
            lineDelimiter = '\r';
        }
        
        // replace instances where a double quote begins a field containing a comma
        // in this case you get a double quote followed by a doubled double quote
        // do this for beginning and end of a field
        contents = ReplaceReallyAll(ReplaceReallyAll(ReplaceReallyAll(ReplaceReallyAll(contents, ',"""',',"DBLQT'), '""",','DBLQT",'), '^"""', '"DBLQT'), '"""$', 'DBLQT"');
        /*contents = contents.replaceAll(',"""',',"DBLQT').replaceall('""",','DBLQT",').replaceAll('^"""', '"DBLQT').replaceAll('"""$', 'DBLQT"');*/
        // replace emtpy fields delimited with quotes
        contents = ReplaceReallyAll(ReplaceReallyAll(ReplaceReallyAll(ReplaceReallyAll(contents, ',"",', ',,'), lineDelimiter + '"",', lineDelimiter + ','), lineDelimiter + '""' + lineDelimiter, lineDelimiter + lineDelimiter), ',""' + lineDelimiter, ',' + lineDelimiter);
        /*contents = contents.replace(',"",', ',,').replace('\n"",', '\n,').replace('\n""\n', '\n\n').replace(',""\n', ',\n');*/
        contents = ReplaceReallyAll(ReplaceReallyAll(contents, '^"",', ','), ',""$', ',');
        /*contents = contents.replaceAll('^"",', ',').replaceAll(',""$', ',');*/
        // now replace all remaining double quotes - we do this so that we can reconstruct
        // fields with commas inside assuming they begin and end with a double quote
        contents = contents.replaceAll('""','DBLQT');
        // we are not attempting to handle fields with a newline inside of them
        // so, split on newline to get the spreadsheet rows
        List<String> lines = new List<String>();
        try {
            lines = contents.split(lineDelimiter);
        } catch (System.ListException e) {
            System.debug('Limits exceeded?' + e.getMessage());
        }
        Integer num = 0;
        for(String line : lines) {
            system.debug('>> CSV line:' + line);
            // check for blank CSV lines (only commas)
            if (line.replaceAll(',','').trim().length() == 0) break;
             
            List<String> fields = line.split(',', -1);   
            List<String> cleanFields = new List<String>();
            String compositeField;
            Boolean makeCompositeField = false;
            for(String field : fields) {
                system.debug('>> CSV field: ' + field);
                if (field.startsWith('"') && field.endsWith('"')) {
                    cleanFields.add(field.substring(1, field.length() - 1).replaceAll('DBLQT','"'));
                } else if (field.startsWith('"')) {
                    makeCompositeField = true;
                    compositeField = field.substring(1);
                } else if (field.endsWith('"')) {
                    compositeField += ',' + field.substring(0, field.length() - 1);
                    cleanFields.add(compositeField.replaceAll('DBLQT','"'));
                    makeCompositeField = false;
                } else if (makeCompositeField) {
                    compositeField +=  ',' + field;
                } else {
                    cleanFields.add(field.replaceAll('DBLQT','"'));
                }
            }
             
            allFields.add(cleanFields);
        }
        if (skipHeaders) allFields.remove(0);
        return allFields;      
    }
    
    public static string ReplaceReallyAll(string s, string replaceWhat, string replaceWith)
    {
        if (s != null)
        {
            string result = s.replaceAll(replaceWhat, replaceWith);
            while (result.contains(replaceWhat))
            {
                result = result.replaceAll(replaceWhat, replaceWith);
            }
            return result;
        } 
        else return s;
    }
    
    public static string htmlEncode(string s)
    {
        return s != null ? s.replace('&', '&amp;').replace('>', '&gt;').replace('<', '&lt;') : s;
    }
    public static String getKeyPrefix(Id inp){
    	String input = (String)inp;
    	if(input == null || input == '' || (input.length() != 15 && input.length() != 18)){
    		return null;
    	}
    	return input.substring(0,3);
    }
}